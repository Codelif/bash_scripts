#!/usr/bin/env python3

import subprocess
from time import sleep

import sys
sys.argv[1]

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify
Notify.init("Virtual Machines")

from i3ipc import Connection
i3 = Connection()




def get_primary() -> dict:
    v = subprocess.getoutput("xrandr").splitlines()

    displays = []
    primary:str

    for i in v:
        if " connected" in i:
            displays.append(i.split()[0])
            if "primary" in i:
                primary = displays[-1]
    
    return (displays, primary)


def get_free_workspace() -> int:
    busy_ws = [i.num for i in i3.get_workspaces()]
    displays = get_primary()
    ws = 100
    # print(list(range(len(displays[0])+, 11)))
    for t_ws in range(len(displays[0])+1, 11):
        if t_ws not in busy_ws:
            ws = t_ws
            break

    return ws, displays
        

def startvm(vm) -> subprocess.CompletedProcess:
    result = subprocess.run(["VBoxManage", "startvm", vm], capture_output=True, timeout=60, text=True)
    return result


def send_noti(msg:str, urgency:int, timeout:int=10000):
    notify = Notify.Notification.new("Virtual Machines", msg, "dialog-information")
    notify.set_urgency(Notify.Urgency(urgency))
    notify.set_timeout(timeout)
    notify.show()


def main():
    f_ws, displays = get_free_workspace()

    i3.command('workspace {}'.format(f_ws))
    i3.command('move workspace to {}'.format(displays[1]))

    sleep(0.5)

    vm = startvm(sys.argv[1])
    if vm.returncode != 0:
        send_noti("ERROR: An Error has occured while trying to start VM '%s'. Please check the logs." % sys.argv[1], 2)
        i3.command('workspace previous')
    else:
        send_noti("SUCCESS: VM '%s' has been started.", 1)

    

if __name__ == "__main__":
    main()


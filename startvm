#!/usr/bin/env python3

import os
import sys
import subprocess
from time import sleep

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify
Notify.init("Virtual Machines")

from i3ipc import Connection
i3 = Connection()

CONFIG_PATH = "/home/harsh/.config/startvm/last_ws" 


def ensure_conff():
    fpath = os.path.dirname(CONFIG_PATH)
    if not os.path.exists(fpath):
        os.mkdir(fpath)


def get_primary() -> dict:
    v = subprocess.getoutput("xrandr").splitlines()

    displays = []
    primary:str

    for i in v:
        if " connected" in i:
            displays.append(i.split()[0])
            if "primary" in i:
                primary = displays[-1]
    
    return (displays, primary)


def get_free_workspace() -> int:
    busy_ws = [i.num for i in i3.get_workspaces()]
    displays = get_primary()
    ws = 100
    for t_ws in range(len(displays[0])+1, 11):
        if t_ws not in busy_ws:
            ws = t_ws
            break

    return ws, displays
        

def startvm(vm, ws, display):
    i3.command('workspace %s' % ws)
    i3.command('move workspace to %s' % display)

    sleep(0.5)

    vm_cmd = subprocess.run(["vboxmanage", "startvm", vm], capture_output=True, timeout=60, text=True)
    
    if vm_cmd.returncode != 0:
        send_noti("ERROR: An Error has occured while trying to start VM '%s'. Please check the logs." % vm, 2)
        print(vm_cmd.stdout)
        i3.command('workspace previous')
    else:
        send_noti("SUCCESS: VM '%s' has been started." % vm, 1)


def stopvm(vm, ws):
    i3.command('workspace %s' % ws)
    sleep(0.5)
    vm_cmd = subprocess.run(["vboxmanage", "controlvm", vm, "savestate"], capture_output=True, timeout=60, text=True)
    
    if vm_cmd.returncode != 0:
        send_noti("ERROR: An Error has occured while trying to stop VM '%s'. Please check the logs." % vm, 2)
        i3.command('workspace previous')
    else:
        send_noti("SUCCESS: VM '%s' has been stopped (saved state)." % vm, 1)


def send_noti(msg:str, urgency:int, timeout:int=10000):
    notify = Notify.Notification.new("Virtual Machines", msg, "dialog-information")
    notify.set_urgency(Notify.Urgency(urgency))
    notify.set_timeout(timeout)
    notify.show()


def check_running(vm):
    if vm in subprocess.getoutput("vboxmanage list runningvms"):
        return True
    return False


def main():
    vm = sys.argv[1]
    
    if not check_running(vm):
        f_ws, displays = get_free_workspace()
        startvm(vm, str(f_ws), displays[1])
        with open(CONFIG_PATH, "w+") as cf:
            cf.write(f_ws)
    else:
        with open(CONFIG_PATH) as cf:
            last_ws = cf.read()
        stopvm(vm, last_ws)

    

if __name__ == "__main__":
    main()


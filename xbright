#!/usr/bin/env python3
import argparse
import subprocess

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify
from gi.repository import GLib


LOWER_LIMIT, UPPER_LIMIT = 0.1, 1.0


def get_brightness() -> dict:
    v = subprocess.getoutput("xrandr --verbose").splitlines()
    m,b = [],[]
    primary:str
    for i in v:
        if " connected" in i:
            m.append(i.split()[0])
            
            if "primary" in i:
                primary = m[-1]

        if "Brightness" in i:
            b.append(i.split()[1])
    return {"brightness": dict(zip(m,b)), "primary":primary}


def check_equal() -> bool:
    """
    Checks if brightness is equal across all displays.
    """
    v:dict = get_brightness()["brightness"]
    return len(set(v.values())) == 1


def equalize_brightness():
    data = get_brightness()
    v:dict = data["brightness"]
    primary = data["primary"]
    
    if len(set(v.values())) != 1:
        for m in v.keys():
            set_brightness(m, float(v[primary]))
            return get_brightness()
    else:
        return data


def set_brightness(display:str, value:float):
    subprocess.run(["xrandr", "--output", display, "--brightness", str(value)])


def set_relative_brightness(inc:float, b_data:dict):
    curr_b = float(next(iter(b_data.values())))
    next_b = curr_b + inc

    if next_b > UPPER_LIMIT:
        next_b = UPPER_LIMIT
    elif next_b < LOWER_LIMIT:
        next_b = LOWER_LIMIT
    
    if next_b != curr_b:
        for i in b_data.keys():
            set_brightness(i, next_b)
    return round(next_b, 2)

    
def show_brightness(bright=float(next(iter(get_brightness()["brightness"].values())))):
    Notify.init("Volume")
    notify = Notify.Notification.new("Brightness", f"{int(bright*100)}%", "dialog-information")

    notify.set_hint("x-canonical-private-synchronous", GLib.Variant("s", "anything"))
    notify.set_timeout(5000)
    notify.show()


def main():
    parser = argparse.ArgumentParser(description='change brightness through software rendering. (xrandr)')
    change = parser.add_mutually_exclusive_group(required=True)
    change.add_argument(*("-d", "--decrement"), metavar="DEC", type=float, required=False)
    change.add_argument(*("-i", "--increment"), metavar='INC', type=float, required=False)
    
    args = dict(parser.parse_args()._get_kwargs())
    inc:float
    if args["increment"]:
        inc = args["increment"]
    else:
        inc = -1*args["decrement"]

    show_brightness(set_relative_brightness(inc, equalize_brightness()["brightness"]))


if __name__ == "__main__":
    main()


#!/usr/bin/env python3
import argparse
import subprocess

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify
from gi.repository import GLib

UPPER_LIMIT = 1.0
LOWER_LIMIT = 0.1


def get_brightness() -> dict:
    v = subprocess.getoutput(" ".join(["xrandr", "--verbose"])).splitlines()
    m,b = [],[]
    primary = ""
    for i in v:
        if " connected" in i:
            m.append(i.split()[0])
            
            if "primary" in i:
                primary = m[-1]

        if "Brightness" in i:
            b.append(i.split()[1])
    return {"brightness": dict(zip(m,b)), "primary":primary}


def check_equal() -> bool:
    """
    Checks if brightness is equal across all displays.
    """
    v:dict = get_brightness()["brightness"]
    if len(set(v.values())) != 1:
        return False
    return True


def equalize_brightness():
    data = get_brightness()
    v:dict = data["brightness"]
    primary = data["primary"]
    
    if len(set(v.values())) != 1:
        for m in v.keys():
            set_brightness(m, float(v[primary]))


def set_brightness(display:str, value:float):
    subprocess.run(["xrandr", "--output", display, "--brightness", str(value)])


# def set_relative_brightness(inc:float):
#     b_data:dict = get_brightness()["brightness"]
#     curr_b = float(next(iter(b_data.values())))
#     next_b = curr_b + inc
#     if next_b > UPPER_LIMIT:
#         next_b = UPPER_LIMIT
#     elif next_b < LOWER_LIMIT:
#         next_b = LOWER_LIMIT
    
#     for i in 

    

def show_brightness():
    Notify.init("Volume")
    notify = Notify.Notification.new("Brightness", next(iter(get_brightness()["brightness"].values())), "dialog-information")

    notify.set_hint("x-canonical-private-synchronous", GLib.Variant("s", "anything"))
    notify.set_timeout(5000)
    notify.show()


## DEPRECATED FUNCTIONS
# def show_brightness(bright):
#     import dbus    
#     notify_interface = dbus.Interface(
#         object=dbus.SessionBus().get_object("org.freedesktop.Notifications", "/org/freedesktop/Notifications"),
#         dbus_interface="org.freedesktop.Notifications")

#     notify_interface.Notify("", 0, "", "xbright", "Current Brightness: {}".format(bright), [], {"urgency": 1}, 1000)

# parser = argparse.ArgumentParser(description='change brightness through software rendering. (xrandr)')
# parser.add_argument(*("-i", "--increment"), type=float, required=False)
# parser.add_argument(*("-d", "--decrement"), type=float, required=False)


    # equalize_brightness()

show_brightness()


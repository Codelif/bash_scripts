#!/usr/bin/env python3
import argparse
import subprocess

import gi
gi.require_version('Notify', '0.7')
from gi.repository import Notify
from gi.repository import GLib

LOWER_LIMIT, UPPER_LIMIT = 0, 100


def get_volume():
    for i in subprocess.getoutput("pactl list sinks").splitlines():
        if "Volume" in i:
            return int(i.split()[4][:-1])


def set_volume(vol:int):
    subprocess.run("pactl set-sink-volume 0 {}%".format(vol).split())


def set_relative_volume(inc:int):
    subprocess.run(f"pactl set-sink-volume 0 {('+'+str(inc)) if inc > 0 else inc}%".split())

def mute():
    subprocess.run("pactl set-sink-mute 0 toggle".split())


def check_muted(sink):
    sinks = []
    state = []
    for i in subprocess.getoutput("pactl list sinks").splitlines():
        if "Sink #" in i:
            sinks.append(int(i.split()[1][1:]))
        if "Mute: " in i :
            state.append(i.split()[1])
    sink_states = dict(zip(sinks, state))
    print(sink_states)
    if sink_states[sink] == "yes":
        return True
    else:
        return False


def show_volume(vol:str):
    Notify.init("Volume")
    notify = Notify.Notification.new("Volume", vol, "dialog-information")

    notify.set_hint("x-canonical-private-synchronous", GLib.Variant("s", "anything"))
    notify.set_timeout(5000)
    notify.show()


def main():
    parser = argparse.ArgumentParser(description="change volume through PulseAudio")
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(*("-r", "--relative"), metavar='INCREMENT', type=int)
    group.add_argument(*("-m", "--mute"), action='store_true')
    args = dict(parser.parse_args()._get_kwargs())

    if args["mute"]:
        mute()
        if check_muted(0):
            show_volume("Muted")
        else:
            show_volume(f"{get_volume()}%")
    else:
        curr_v = get_volume()
        next_v = curr_v + args["relative"]

        if next_v > UPPER_LIMIT:
            next_v = UPPER_LIMIT
        elif next_v < LOWER_LIMIT:
            next_v = LOWER_LIMIT

        if curr_v != next_v:
            set_volume(next_v)
        show_volume(f"{next_v}%")


if __name__ == "__main__":
    main()

